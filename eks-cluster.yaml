apiVersion: eksctl.io/v1alpha5
kind: ClusterConfig
metadata:
  # If changing the cluster name, don't forget to update in the nodegroups' bootstrap.sh commands as well!
  name: gitpod
  # Template, please change to your region of choice
  region: us-west-2
  version: "1.22"

iam:
  withOIDC: true

  serviceAccounts:
    - metadata:
        name: aws-load-balancer-controller
        namespace: kube-system
      wellKnownPolicies:
        awsLoadBalancerController: true
    - metadata:
        name: ebs-csi-controller-sa
        namespace: kube-system
      wellKnownPolicies:
        ebsCSIController: true
    - metadata:
        name: cluster-autoscaler
        namespace: kube-system
      wellKnownPolicies:
        autoScaler: true


# By default we create a dedicated VPC for the cluster
# You can use an existing VPC by supplying private and/or public subnets. Please check
# https://eksctl.io/usage/vpc-networking/#use-existing-vpc-other-custom-configuration
vpc:
  autoAllocateIPv6: false
  nat:
    # For production environments user HighlyAvailable
    # https://eksctl.io/usage/vpc-networking/#nat-gateway
    gateway: Single

# Enable EKS control plane logging
# https://docs.aws.amazon.com/eks/latest/userguide/control-plane-logs.html
cloudWatch:
  clusterLogging:
    enableTypes: ["audit", "authenticator"]

privateCluster:
  enabled: false
  additionalEndpointServices:
    - "autoscaling"
    - "logs"

managedNodeGroups:
  - name: workspaces
    ami: ami-0f1564db62fff025e
    spot: false
    instanceTypes: ["m6i.xlarge", "m6i.2xlarge"]
    desiredCapacity: 2
    minSize: 1
    maxSize: 10
    disableIMDSv1: false
    volumeSize: 300
    volumeType: gp3
    volumeIOPS: 6000
    volumeThroughput: 500
    ebsOptimized: true
    privateNetworking: true
    propagateASGTags: true
    # Node SSH access (optional)
    # ssh:
    #   # auto-imports ~/.ssh/id_rsa.pub as authorized_key
    #   allow: true

    iam:
      attachPolicyARNs:
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
        - arn:aws:iam::aws:policy/ElasticLoadBalancingFullAccess
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      withAddonPolicies:
        albIngress: true
        autoScaler: true
        cloudWatch: true
        ebs: true

    tags:
      k8s.io/cluster-autoscaler/enabled: "true"
      k8s.io/cluster-autoscaler/gitpod: "owned"

    labels:
      gitpod.io/workload_workspace_regular: "true"
      gitpod.io/workload_workspace_services: "true"
      gitpod.io/workload_workspace_headless: "true"

    overrideBootstrapCommand: |
      #!/bin/bash
      source /var/lib/cloud/scripts/eksctl/bootstrap.helper.sh
      /etc/eks/bootstrap.sh gitpod --container-runtime containerd --use-max-pods false --kubelet-extra-args "--node-labels=${NODE_LABELS}"
      # Update containerd config
      apt-get update && apt-get install -y python3-pip
      pip3 install toml mergedeep
      /usr/bin/env python3 - << EOF > /var/log/update-containerd-config-out.txt 2>&1
      import toml
      from mergedeep import merge
      c = toml.load('/etc/containerd/config.toml')
      merge(c, {'plugins': {'io.containerd.grpc.v1.cri': {'registry': {'config_path': '/etc/containerd/certs.d'}}}})
      with open('/etc/containerd/config.toml', 'w') as f:
          toml.dump(c, f)
      EOF
      service containerd restart

  - name: service
    ami: ami-0f1564db62fff025e
    spot: false
    instanceTypes: ["m6i.xlarge"]
    desiredCapacity: 2
    minSize: 1
    maxSize: 4
    disableIMDSv1: false
    volumeSize: 300
    volumeType: gp3
    volumeIOPS: 6000
    volumeThroughput: 500
    ebsOptimized: true
    privateNetworking: true
    propagateASGTags: true
    # Node SSH access (optional)
    # ssh:
    #   # auto-imports ~/.ssh/id_rsa.pub as authorized_key
    #   allow: true

    iam:
      attachPolicyARNs:
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
        - arn:aws:iam::aws:policy/ElasticLoadBalancingFullAccess
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      withAddonPolicies:
        albIngress: true
        autoScaler: true
        cloudWatch: true
        certManager: true
        ebs: true

    tags:
      k8s.io/cluster-autoscaler/enabled: "true"
      k8s.io/cluster-autoscaler/gitpod: "owned"

    labels:
      gitpod.io/workload_meta: "true"
      gitpod.io/workload_ide: "true"

    overrideBootstrapCommand: |
      #!/bin/bash
      source /var/lib/cloud/scripts/eksctl/bootstrap.helper.sh
      /etc/eks/bootstrap.sh gitpod --container-runtime containerd --use-max-pods false --kubelet-extra-args "--node-labels=${NODE_LABELS}"
      # Update containerd config
      apt-get update && apt-get install -y python3-pip
      pip3 install toml mergedeep
      /usr/bin/env python3 - << EOF > /var/log/update-containerd-config-out.txt  2>&1
      import toml
      from mergedeep import merge
      c = toml.load('/etc/containerd/config.toml')
      merge(c, {'plugins': {'io.containerd.grpc.v1.cri': {'registry': {'config_path': '/etc/containerd/certs.d'}}}})
      with open('/etc/containerd/config.toml', 'w') as f:
          toml.dump(c, f)
      EOF
      service containerd restart
